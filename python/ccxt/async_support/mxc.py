# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange
import hashlib
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import ArgumentsRequired


class mxc(Exchange):

    def describe(self):
        return self.deep_extend(super(mxc, self).describe(), {
            'id': 'mxc',
            'name': 'MXC',
            'countries': ['CN'],
            'version': 'v2',
            'rateLimit': 1000,
            'has': {
                'fetchCurrencies': False,
                'CORS': False,
                'createMarketOrder': False,
                'fetchTickers': True,
                'withdraw': False,
                'fetchDeposits': False,
                'fetchWithdrawals': False,
                'fetchTransactions': False,
                'createDepositAddress': False,
                'fetchDepositAddress': False,
                'fetchClosedOrders': False,
                'fetchOHLCV': True,
                'fetchOpenOrders': True,
                'fetchOrderTrades': False,
                'fetchOrders': True,
                'fetchOrder': True,
                'fetchMyTrades': False,
                'fetchBalance': True,
                'fetchOrderBook': True,
                'fetchTrades': True,
                'createOrder': True,
                'cancelOrder': True,
            },
            'urls': {
                'logo': '',
                'api': {
                    'public': 'https://www.mxc.ceo/open/api/v2/',
                    'private': 'https://www.mxc.ceo/open/api/v2/',
                },
                'www': 'https://mxc.ceo/',
                'doc': 'https://mxcdevelop.github.io/APIDoc/open.api.v2.en.html',
                'fees': [
                    'https://www.mxc.ceo/info/fee',
                ],
                'referral': '',
            },
            'api': {
                'public': {
                    'get': [
                        'market/ticker',
                        'market/symbols',
                        'market/depth',
                        'market/kline',
                        'market/deals',
                    ],
                },
                'private': {
                    'get': [
                        'account/info',
                        'current/orders',
                        'order/deals',
                        'order/open_orders',
                        'order/list',
                        'order/query',
                        'order/deal_detail',
                    ],
                    'post': [
                        'order/place',
                        'order/place_batch',
                    ],
                    'delete': [
                        'order/cancel',
                        'order/cancel_by_symbol',
                    ],
                },
            },
            'requiredCredentials': {
                'apiKey': True,
                'secret': True,
            },
            'fees': {
                'trading': {
                    'tierBased': True,
                    'percentage': True,
                    'maker': 0.002,
                    'taker': 0.002,
                },
            },
            'exceptions': {
            },
            'options': {
                'limits': {
                    'cost': {
                        'min': {
                            'BTC': 0.0001,
                            'ETH': 0.001,
                            'USDT': 1,
                        },
                    },
                },
            },
        })

    async def fetch_markets(self, params={}):
        response = await self.publicGetMarketSymbols(self.extend({
            'api_key': self.apiKey,
        }, params))
        markets = self.safe_value(response, 'data')
        if not markets:
            raise ExchangeError(self.id + ' fetchMarkets got an unrecognized response')
        result = []
        for i in range(0, len(markets)):
            market = markets[i]
            parts = market['symbol'].split('_')
            numParts = len(parts)
            baseId = parts[0]
            quoteId = parts[1]
            if numParts > 2:
                baseId = parts[0] + '_' + parts[1]
                quoteId = parts[2]
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            precision = {
                'amount': 8,
                'price': market['price_scale'],
            }
            limits = {
                'amount': {
                    'min': self.safe_float(market, 'min_amount'),
                    'max': self.safe_float(market, 'max_amount'),
                },
                'price': {
                    'min': None,
                    'max': None,
                },
                'cost': {
                    'min': None,
                    'max': None,
                },
            }
            result.append({
                'id': market['symbol'],
                'symbol': base + '/' + quote,
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'info': market,
                'active': True,
                'maker': self.safe_float(market, 'maker_fee_rate'),
                'taker': self.safe_float(market, 'taker_fee_rate'),
                'precision': precision,
                'limits': limits,
            })
        return result

    async def fetch_balance(self, params={}):
        await self.load_markets()
        request = {}
        response = await self.privateGetAccountInfo(self.extend(request, params))
        result = {'info': response}
        balances = self.safe_value(response, 'data', {})
        currencyIds = list(balances.keys())
        for i in range(0, len(currencyIds)):
            currencyId = currencyIds[i]
            code = self.safe_currency_code(currencyId)
            account = self.account()
            account['free'] = self.safe_float(balances[currencyId], 'available')
            account['used'] = self.safe_float(balances[currencyId], 'frozen')
            result[code] = account
        return self.parse_balance(result)

    async def fetch_order_book(self, symbol, limit=None, params={}):
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'depth': 5,
            'symbol': market['id'],
            'api_key': self.apiKey,
        }
        response = await self.publicGetMarketDepth(self.extend(request, params))
        orderbook = self.safe_value(response, 'data')
        return self.parse_order_book(orderbook, None, 'bids', 'asks', 'price', 'quantity')

    def parse_ohlcv(self, ohlcv, market=None, timeframe='1m', since=None, limit=None):
        # they return [Timestamp, Volume, Close, High, Low, Open]
        return [
            int(ohlcv[0]),   # t
            float(ohlcv[1]),  # o
            float(ohlcv[2]),  # c
            float(ohlcv[3]),  # h
            float(ohlcv[4]),  # l
            float(ohlcv[5]),  # v
            # float(ohlcv[6]),  # a -- leaving self out as it is not in CCXT OHLCV structure
        ]

    async def fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=1, params={}):
        self.fetch_markets()
        periodDurationInSeconds = self.parse_timeframe(timeframe)
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
            'interval': timeframe,
            'api_key': self.apiKey,
            'limit': limit,
        }
        # max limit = 1001
        if limit is not None:
            hours = int((periodDurationInSeconds * limit) / 3600)
            request['range_hour'] = max(0, hours - 1)
        if since is not None:
            request['startTime'] = int(since / 1000)
        response = await self.publicGetMarketKline(self.extend(request, params))
        # "data": [
        #     [
        #         1557728040,    #timestamp in seconds
        #         "7054.7",      #open
        #         "7056.26",     #close
        #         "7056.29",     #high
        #         "7054.16",     #low
        #         "9.817734",    #vol
        #         "6926.521"     #amount
        #     ],
        #     [
        #         1557728100,
        #         "7056.26",
        #         "7042.17",
        #         "7056.98",
        #         "7042.16",
        #         "23.69423",
        #         "1677.931"
        #     ]
        # ]
        data = self.safe_value(response, 'data', [])
        return self.parse_ohlcvs(data, None, timeframe, since, limit)

    def parse_ticker(self, ticker, market=None):
        timestamp = self.milliseconds()
        symbol = None
        if market:
            symbol = market['symbol']
        last = self.safe_float(ticker, 'last')
        percentage = None
        open = self.safe_float(ticker, 'open')
        change = self.safe_float(ticker, 'change_rate')
        average = None
        if (last is not None) and (percentage is not None):
            change = last - open
            average = self.sum(last, open) / 2
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_float(ticker, 'high'),
            'low': self.safe_float(ticker, 'low'),
            'bid': self.safe_float(ticker, 'bid'),
            'bidVolume': None,
            'ask': self.safe_float(ticker, 'ask'),
            'askVolume': None,
            'vwap': None,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': change,
            'percentage': percentage,
            'average': average,
            'baseVolume': self.safe_float(ticker, 'volume'),
            'quoteVolume': None,
            'info': ticker,
        }

    async def fetch_tickers(self, symbols=None, params={}):
        request = self.extend({
            'api_key': self.apiKey,
        }, params)
        response = await self.publicGetMarketTicker(request)
        result = {}
        data = self.safe_value(response, 'data', [])
        for i in range(0, len(data)):
            marketId = self.safe_string(data[i], 'symbol')
            market = self.safe_value(self.markets_by_id, marketId)
            symbol = marketId
            if market is not None:
                symbol = market['symbol']
                ticker = self.parse_ticker(data[i], market)
                result[symbol] = ticker
        return self.filter_by_array(result, 'symbol', symbols)

    async def fetch_ticker(self, symbol, params={}):
        market = self.market(symbol)
        response = await self.publicGetMarketTicker(self.extend({
            'api_key': self.apiKey,
            'symbol': market['id'],
        }, params))
        ticker = self.safe_value(response, 'data')
        return self.parse_ticker(ticker, None)

    def parse_trade(self, trade, market=None):
        dateStr = self.safe_value(trade, 'tradeTime')
        timestamp = None
        if dateStr is not None:
            timestamp = self.parse_date(dateStr + '  GMT+8')
        # take either of orderid or orderId
        price = self.safe_float(trade, 'trade_price')
        amount = self.safe_float(trade, 'trade_quantity')
        type = self.safe_string(trade, 'trade_type')
        cost = None
        if price is not None:
            if amount is not None:
                cost = price * amount
        symbol = None
        if market is not None:
            symbol = market['symbol']
        return {
            'id': None,
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'order': None,
            'type': None,
            'side': 'buy' if (type == '1') else 'sell',
            'takerOrMaker': None,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': None,
        }

    async def fetch_trades(self, symbol, since=None, limit=None, params={}):
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
            'api_key': self.apiKey,
        }
        response = await self.publicGetMarketDeals(self.extend(request, params))
        return self.parse_trades(response['data'], market, since, limit)

    async def fetch_orders(self, symbol=None, since=None, limit=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOrders() requires a symbol argument')
        defaultType = 'BID'
        type = self.safe_string(params, 'type', defaultType)
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
            'trade_type': 'BID' if (type == 'buy') else 'ASK',
            'limit': limit,
        }
        response = await self.privateGetOrderList(self.extend(request, params))
        return self.parse_orders(response['data'], None, since, limit)

    async def fetch_order(self, id, symbol=None, params={}):
        await self.load_markets()
        request = {
            'order_ids': id,
        }
        response = await self.privateGetOrderQuery(self.extend(request, params))
        return self.parse_order(response['data'])

    def parse_order_side(self, side):
        sides = {
            '1': 'BID',
            '2': 'ASK',
        }
        return self.safe_string(sides, side, side)

    def parse_order_status(self, status):
        statuses = {
            '1': 'open',
            '2': 'closed',
            '3': 'open',  # partial closed
            '4': 'canceled',  # partial closed
            '5': 'canceled',  # partial canceled
        }
        return self.safe_string(statuses, status, status)

    def parse_order(self, order, market=None):
        # Different API endpoints returns order info in different format...
        # with different fields filled.
        id = self.safe_string(order, 'id')
        if id is None:
            id = self.safe_string(order, 'data')
        symbol = None
        marketId = self.safe_string(order, 'market')
        if marketId in self.markets_by_id:
            market = self.markets_by_id[marketId]
        if market is not None:
            symbol = market['symbol']
        dateStr = self.safe_string(order, 'createTime')
        # XXX: MXC returns order creation times in GMT+8 timezone with out specifying it
        #  hence appending ' GMT+8' to it so we can get the correct value
        # XXX: Also MXC api does not return actual matched prices and costs/fees
        timestamp = None
        if dateStr is not None:
            timestamp = self.parse_date(dateStr + '  GMT+8')
        status = self.parse_order_status(self.safe_string(order, 'status'))
        side = self.parse_order_side(self.safe_string(order, 'type'))
        price = self.safe_float(order, 'price')
        amount = self.safe_float(order, 'totalQuantity')
        if amount is None:
            amount = self.safe_float(order, 'initialAmount')
        filled = self.safe_float(order, 'tradedQuantity')
        average = None
        remaining = None
        if (filled is not None) and (amount is not None):
            remaining = amount - filled
        return {
            'id': id,
            'datetime': self.iso8601(timestamp),
            'timestamp': timestamp,
            'status': status,
            'symbol': symbol,
            'type': 'limit',
            'side': side,
            'price': price,
            'cost': None,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'average': average,
            'trades': None,
            'fee': {
                'cost': None,
                'currency': None,
                'rate': None,
            },
            'info': order,
        }

    async def create_order(self, symbol, type, side, amount, price=None, params={}):
        if type == 'market':
            raise ExchangeError(self.id + ' allows limit orders only')
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': self.market_id(symbol),
            'price': price,
            'quantity': amount,
            'order_type': 'LIMIT_ORDER',
            'trade_type': 'BID' if (side == 'buy') else 'ASK',
        }
        response = await self.privatePostOrderPlace(self.extend(request, params))
        return self.parse_order(self.extend({
            'status': 'open',
            'type': side,
            'initialAmount': amount,
        }, response), market)

    async def fetch_open_orders(self, symbol=None, since=None, limit=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOpenOrders() requires a symbol argument')
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = await self.privateGetOrderOpenOrders(self.extend(request, params))
        return self.parse_orders(response['data'], market, since, limit)

    async def cancel_order(self, id, symbol=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelOrder requires symbol argument')
        await self.load_markets()
        request = {
            'order_ids': id,
        }
        return await self.privateDeleteOrderCancel(self.extend(request, params))

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'][api] + self.implode_params(path, params)
        requestTime = str(self.milliseconds())
        query = params
        if api == 'public':
            if query:
                url += '?' + self.urlencode(query)
        else:
            self.check_required_credentials()
            toBeSigned = ''
            if method == 'POST':
                body = self.json(params)
                toBeSigned = body
            else:
                toBeSigned = self.rawencode(self.keysort(query))
                if query:
                    url += '?' + toBeSigned
            signature = self.hmac(self.encode(self.apiKey + requestTime + toBeSigned), self.encode(self.secret), hashlib.sha256)
            headers = {
                'ApiKey': self.apiKey,
                'Request-Time': requestTime,
                'Signature': signature,
                'Content-Type': 'application/json',
            }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if response is None:
            return
        resultString = self.safe_string(response, 'result', '')
        if resultString != 'false':
            return
        errorCode = self.safe_string(response, 'code')
        message = self.safe_string(response, 'message', body)
        if errorCode is not None:
            feedback = self.safe_string(self.errorCodeNames, errorCode, message)
            self.throw_exactly_matched_exception(self.exceptions['exact'], errorCode, feedback)
